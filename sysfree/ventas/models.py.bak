from django.db import models
from django.utils.translation import gettext_lazy as _
from core.models import ModeloBase
from clientes.models import Cliente, DireccionCliente
from inventario.models import Producto


class Proforma(ModeloBase):
    """Modelo para proformas."""
    
    ESTADO_CHOICES = (
        ('borrador', _('Borrador')),
        ('enviada', _('Enviada')),
        ('aceptada', _('Aceptada')),
        ('rechazada', _('Rechazada')),
        ('vencida', _('Vencida')),
        ('facturada', _('Facturada')),
    )
    
    numero = models.CharField(_('número'), max_length=20, unique=True)
    fecha = models.DateTimeField(_('fecha'), auto_now_add=True)
    cliente = models.ForeignKey(
        Cliente,
        verbose_name=_('cliente'),
        on_delete=models.PROTECT,
        related_name='proformas'
    )
    direccion_facturacion = models.ForeignKey(
        DireccionCliente,
        verbose_name=_('dirección de facturación'),
        on_delete=models.PROTECT,
        related_name='proformas_facturacion',
        null=True,
        blank=True
    )
    direccion_envio = models.ForeignKey(
        DireccionCliente,
        verbose_name=_('dirección de envío'),
        on_delete=models.PROTECT,
        related_name='proformas_envio',
        null=True,
        blank=True
    )
    estado = models.CharField(_('estado'), max_length=10, choices=ESTADO_CHOICES, default='borrador')
    subtotal = models.DecimalField(_('subtotal'), max_digits=10, decimal_places=2, default=0)
    iva = models.DecimalField(_('IVA'), max_digits=10, decimal_places=2, default=0)
    descuento = models.DecimalField(_('descuento'), max_digits=10, decimal_places=2, default=0)
    total = models.DecimalField(_('total'), max_digits=10, decimal_places=2, default=0)
    validez = models.PositiveIntegerField(_('validez (días)'), default=15)
    notas = models.TextField(_('notas'), blank=True)
    reparacion = models.ForeignKey(
        'reparaciones.Reparacion',
        verbose_name=_('reparación'),
        on_delete=models.SET_NULL,
        related_name='proformas',
        null=True,
        blank=True
    )
    factura = models.ForeignKey(
        'Venta',
        verbose_name=_('factura'),
        on_delete=models.SET_NULL,
        related_name='proformas',
        null=True,
        blank=True
    )
    
    class Meta:
        verbose_name = _('proforma')
        verbose_name_plural = _('proformas')
        ordering = ['-fecha']
    
    def __str__(self):
        return f"{self.numero} - {self.cliente}"


class DetalleProforma(ModeloBase):
    """Modelo para detalles de proformas."""
    
    proforma = models.ForeignKey(
        Proforma,
        verbose_name=_('proforma'),
        on_delete=models.CASCADE,
        related_name='detalles'
    )
    producto = models.ForeignKey(
        Producto,
        verbose_name=_('producto'),
        on_delete=models.PROTECT,
        related_name='detalles_proforma'
    )
    cantidad = models.DecimalField(_('cantidad'), max_digits=10, decimal_places=2)
    precio_unitario = models.DecimalField(_('precio unitario'), max_digits=10, decimal_places=2)
    descuento = models.DecimalField(_('descuento'), max_digits=10, decimal_places=2, default=0)
    iva = models.DecimalField(_('IVA'), max_digits=10, decimal_places=2, default=0)
    subtotal = models.DecimalField(_('subtotal'), max_digits=10, decimal_places=2)
    total = models.DecimalField(_('total'), max_digits=10, decimal_places=2)
    
    class Meta:
        verbose_name = _('detalle de proforma')
        verbose_name_plural = _('detalles de proforma')
    
    def __str__(self):
        return f"{self.producto} x {self.cantidad}"


class Venta(ModeloBase):
    """Modelo para ventas."""
    
    TIPO_CHOICES = (
        ('factura', _('Factura')),
        ('nota_venta', _('Nota de Venta')),
        ('ticket', _('Ticket')),
    )
    
    ESTADO_CHOICES = (
        ('borrador', _('Borrador')),
        ('emitida', _('Emitida')),
        ('pagada', _('Pagada')),
        ('anulada', _('Anulada')),
    )
    
    numero = models.CharField(_('número'), max_length=20, unique=True)
    fecha = models.DateTimeField(_('fecha'), auto_now_add=True)
    cliente = models.ForeignKey(
        Cliente,
        verbose_name=_('cliente'),
        on_delete=models.PROTECT,
        related_name='ventas'
    )
    direccion_facturacion = models.ForeignKey(
        DireccionCliente,
        verbose_name=_('dirección de facturación'),
        on_delete=models.PROTECT,
        related_name='ventas_facturacion',
        null=True,
        blank=True
    )
    direccion_envio = models.ForeignKey(
        DireccionCliente,
        verbose_name=_('dirección de envío'),
        on_delete=models.PROTECT,
        related_name='ventas_envio',
        null=True,
        blank=True
    )
    tipo = models.CharField(_('tipo'), max_length=10, choices=TIPO_CHOICES, default='factura')
    estado = models.CharField(_('estado'), max_length=10, choices=ESTADO_CHOICES, default='borrador')
    subtotal = models.DecimalField(_('subtotal'), max_digits=10, decimal_places=2, default=0)
    iva = models.DecimalField(_('IVA'), max_digits=10, decimal_places=2, default=0)
    descuento = models.DecimalField(_('descuento'), max_digits=10, decimal_places=2, default=0)
    total = models.DecimalField(_('total'), max_digits=10, decimal_places=2, default=0)
    
    # Campos para facturación electrónica
    clave_acceso = models.CharField(_('clave de acceso'), max_length=49, blank=True)
    numero_autorizacion = models.CharField(_('número de autorización'), max_length=49, blank=True)
    fecha_autorizacion = models.DateTimeField(_('fecha de autorización'), null=True, blank=True)
    
    # Campos para seguimiento
    fecha_pago = models.DateTimeField(_('fecha de pago'), null=True, blank=True)
    fecha_envio = models.DateTimeField(_('fecha de envío'), null=True, blank=True)
    fecha_entrega = models.DateTimeField(_('fecha de entrega'), null=True, blank=True)
    
    notas = models.TextField(_('notas'), blank=True)
    
    class Meta:
        verbose_name = _('venta')
        verbose_name_plural = _('ventas')
        ordering = ['-fecha']
    
    def __str__(self):
        return f"{self.numero} - {self.cliente}"
    
    @property
    def esta_pagado(self):
        """Indica si la venta está completamente pagada."""
        if self.estado == 'pagada':
            return True
        
        total_pagado = sum(pago.monto for pago in self.pagos.filter(estado='aprobado'))
        return total_pagado >= self.total


class DetalleVenta(ModeloBase):
    """Modelo para detalles de ventas."""
    
    venta = models.ForeignKey(
        Venta,
        verbose_name=_('venta'),
        on_delete=models.CASCADE,
        related_name='detalles'
    )
    producto = models.ForeignKey(
        Producto,
        verbose_name=_('producto'),
        on_delete=models.PROTECT,
        related_name='detalles_venta'
    )
    cantidad = models.DecimalField(_('cantidad'), max_digits=10, decimal_places=2)
    precio_unitario = models.DecimalField(_('precio unitario'), max_digits=10, decimal_places=2)
    descuento = models.DecimalField(_('descuento'), max_digits=10, decimal_places=2, default=0)
    iva = models.DecimalField(_('IVA'), max_digits=10, decimal_places=2, default=0)
    subtotal = models.DecimalField(_('subtotal'), max_digits=10, decimal_places=2)
    total = models.DecimalField(_('total'), max_digits=10, decimal_places=2)
    
    class Meta:
        verbose_name = _('detalle de venta')
        verbose_name_plural = _('detalles de venta')
    
    def __str__(self):
        return f"{self.producto} x {self.cantidad}"


class Pago(ModeloBase):
    """Modelo para pagos."""
    
    METODO_CHOICES = (
        ('efectivo', _('Efectivo')),
        ('tarjeta', _('Tarjeta de crédito/débito')),
        ('transferencia', _('Transferencia bancaria')),
        ('cheque', _('Cheque')),
        ('credito', _('Crédito')),
        ('otro', _('Otro')),
    )
    
    ESTADO_CHOICES = (
        ('pendiente', _('Pendiente')),
        ('aprobado', _('Aprobado')),
        ('rechazado', _('Rechazado')),
        ('anulado', _('Anulado')),
    )
    
    venta = models.ForeignKey(
        Venta,
        verbose_name=_('venta'),
        on_delete=models.CASCADE,
        related_name='pagos'
    )
    fecha = models.DateTimeField(_('fecha'), auto_now_add=True)
    metodo = models.CharField(_('método'), max_length=15, choices=METODO_CHOICES)
    monto = models.DecimalField(_('monto'), max_digits=10, decimal_places=2)
    referencia = models.CharField(_('referencia'), max_length=100, blank=True)
    estado = models.CharField(_('estado'), max_length=10, choices=ESTADO_CHOICES, default='pendiente')
    
    # Campos para tarjeta
    numero_tarjeta = models.CharField(_('número de tarjeta'), max_length=19, blank=True)
    titular_tarjeta = models.CharField(_('titular de tarjeta'), max_length=100, blank=True)
    
    # Campos para transferencia/depósito
    banco = models.CharField(_('banco'), max_length=100, blank=True)
    numero_cuenta = models.CharField(_('número de cuenta'), max_length=30, blank=True)
    
    # Campos para cheque
    numero_cheque = models.CharField(_('número de cheque'), max_length=30, blank=True)
    banco_cheque = models.CharField(_('banco del cheque'), max_length=100, blank=True)
    
    notas = models.TextField(_('notas'), blank=True)
    
    class Meta:
        verbose_name = _('pago')
        verbose_name_plural = _('pagos')
        ordering = ['-fecha']
    
    def __str__(self):
        return f"{self.get_metodo_display()} - {self.monto}"